import { Component, JSX } from "solid-js";
import type { EventKey, DynamicRefForwardingComponent } from "./types";
import { TransitionCallbacks, TransitionComponent } from "solid-react-transition";
export interface TabPanelProps extends TransitionCallbacks, JSX.HTMLAttributes<HTMLElement> {
    /**
     * Element used to render the component.
     */
    as?: keyof JSX.IntrinsicElements | Component<any>;
    /**
     * A key that associates the `TabPanel` with it's controlling `NavLink`.
     */
    eventKey?: EventKey;
    /**
     * Toggles the active state of the TabPanel, this is generally controlled by `Tabs`.
     */
    active?: boolean;
    /**
     * Use animation when showing or hiding `<TabPanel>`s. Use a react-transition-group
     * `<Transition/>` component.
     */
    transition?: TransitionComponent;
    /**
     * Wait until the first "enter" transition to mount the tab (add it to the DOM)
     */
    mountOnEnter?: boolean;
    /**
     * Unmount the tab (remove it from the DOM) when it is no longer visible
     */
    unmountOnExit?: boolean;
}
export interface useTabPanel extends TabPanelProps {
    id?: any;
    "aria-labelledby"?: any;
}
export interface TabPanelMetadata extends TransitionCallbacks {
    eventKey?: EventKey;
    isActive?: boolean;
    transition?: TransitionComponent;
    mountOnEnter?: boolean;
    unmountOnExit?: boolean;
}
export declare function useTabPanel(p: TabPanelProps): readonly [useTabPanel, TabPanelMetadata];
declare const TabPanel: DynamicRefForwardingComponent<"div", TabPanelProps>;
export default TabPanel;
