import { JSX } from "solid-js";
import { BsPrefixRefForwardingComponent, AsProp } from "./helpers";
export interface FormProps extends JSX.FormHTMLAttributes<HTMLFormElement>, AsProp {
    validated?: boolean;
}
declare const _default: BsPrefixRefForwardingComponent<"form", FormProps> & {
    Group: BsPrefixRefForwardingComponent<"div", import("./FormGroup").FormGroupProps>;
    Control: BsPrefixRefForwardingComponent<"input", import("./FormControl").FormControlProps> & {
        Feedback: BsPrefixRefForwardingComponent<"div", import("./Feedback").FeedbackProps>;
    };
    Floating: BsPrefixRefForwardingComponent<"div", unknown>;
    Check: BsPrefixRefForwardingComponent<"input", import("./FormCheck").FormCheckProps> & {
        Input: BsPrefixRefForwardingComponent<"input", import("./FormCheckInput").FormCheckInputProps>;
        Label: (p: import("./FormCheckLabel").FormCheckLabelProps) => JSX.Element;
    };
    Switch: BsPrefixRefForwardingComponent<BsPrefixRefForwardingComponent<"input", import("./FormCheck").FormCheckProps> & {
        Input: BsPrefixRefForwardingComponent<"input", import("./FormCheckInput").FormCheckInputProps>;
        Label: (p: import("./FormCheckLabel").FormCheckLabelProps) => JSX.Element;
    }, {
        max?: string | number | undefined;
        required?: boolean | undefined;
        inline?: boolean | undefined;
        feedback?: JSX.Element;
        id?: string | undefined;
        height?: string | number | undefined;
        width?: string | number | undefined;
        name?: string | undefined;
        color?: string | undefined;
        translate?: "yes" | "no" | undefined;
        value?: string | number | string[] | undefined;
        hidden?: boolean | undefined;
        dir?: JSX.HTMLDir | undefined;
        form?: string | undefined;
        label?: JSX.Element;
        style?: string | JSX.CSSProperties | undefined;
        title?: string | undefined;
        pattern?: string | undefined;
        contextmenu?: string | undefined;
        autocomplete?: string | undefined;
        accessKey?: string | undefined;
        autocapitalize?: JSX.HTMLAutocapitalize | undefined;
        draggable?: boolean | undefined;
        innerText?: string | number | undefined;
        lang?: string | undefined;
        spellcheck?: boolean | undefined;
        classList?: {
            [k: string]: boolean | undefined;
        } | undefined;
        className?: string | undefined;
        part?: string | undefined;
        prefix?: string | undefined;
        textContent?: string | number | undefined;
        innerHTML?: string | undefined;
        children?: JSX.Element;
        oncopy?: JSX.EventHandlerUnion<HTMLInputElement, ClipboardEvent> | undefined;
        oncut?: JSX.EventHandlerUnion<HTMLInputElement, ClipboardEvent> | undefined;
        onpaste?: JSX.EventHandlerUnion<HTMLInputElement, ClipboardEvent> | undefined;
        contentEditable?: boolean | "inherit" | undefined;
        inputMode?: "search" | "numeric" | "none" | "url" | "text" | "decimal" | "tel" | "email" | undefined;
        onabort?: JSX.EventHandlerUnion<HTMLInputElement, Event> | undefined;
        onanimationend?: JSX.EventHandlerUnion<HTMLInputElement, AnimationEvent> | undefined;
        onanimationiteration?: JSX.EventHandlerUnion<HTMLInputElement, AnimationEvent> | undefined;
        onanimationstart?: JSX.EventHandlerUnion<HTMLInputElement, AnimationEvent> | undefined;
        onblur?: JSX.EventHandlerUnion<HTMLInputElement, FocusEvent> | undefined;
        oncanplay?: JSX.EventHandlerUnion<HTMLInputElement, Event> | undefined;
        oncanplaythrough?: JSX.EventHandlerUnion<HTMLInputElement, Event> | undefined;
        onchange?: JSX.EventHandlerUnion<HTMLInputElement, Event> | undefined;
        onclick?: JSX.EventHandlerUnion<HTMLInputElement, MouseEvent> | undefined;
        oncontextmenu?: JSX.EventHandlerUnion<HTMLInputElement, MouseEvent> | undefined;
        ondblclick?: JSX.EventHandlerUnion<HTMLInputElement, MouseEvent> | undefined;
        ondrag?: JSX.EventHandlerUnion<HTMLInputElement, DragEvent> | undefined;
        ondragend?: JSX.EventHandlerUnion<HTMLInputElement, DragEvent> | undefined;
        ondragenter?: JSX.EventHandlerUnion<HTMLInputElement, DragEvent> | undefined;
        ondragleave?: JSX.EventHandlerUnion<HTMLInputElement, DragEvent> | undefined;
        ondragover?: JSX.EventHandlerUnion<HTMLInputElement, DragEvent> | undefined;
        ondragstart?: JSX.EventHandlerUnion<HTMLInputElement, DragEvent> | undefined;
        ondrop?: JSX.EventHandlerUnion<HTMLInputElement, DragEvent> | undefined;
        ondurationchange?: JSX.EventHandlerUnion<HTMLInputElement, Event> | undefined;
        onemptied?: JSX.EventHandlerUnion<HTMLInputElement, Event> | undefined;
        onended?: JSX.EventHandlerUnion<HTMLInputElement, Event> | undefined;
        onerror?: JSX.EventHandlerUnion<HTMLInputElement, Event> | undefined;
        onfocus?: JSX.EventHandlerUnion<HTMLInputElement, FocusEvent> | undefined;
        ongotpointercapture?: JSX.EventHandlerUnion<HTMLInputElement, PointerEvent> | undefined;
        oninput?: JSX.EventHandlerUnion<HTMLInputElement, InputEvent> | undefined;
        oninvalid?: JSX.EventHandlerUnion<HTMLInputElement, Event> | undefined;
        onkeydown?: JSX.EventHandlerUnion<HTMLInputElement, KeyboardEvent> | undefined;
        onkeypress?: JSX.EventHandlerUnion<HTMLInputElement, KeyboardEvent> | undefined;
        onkeyup?: JSX.EventHandlerUnion<HTMLInputElement, KeyboardEvent> | undefined;
        onload?: JSX.EventHandlerUnion<HTMLInputElement, Event> | undefined;
        onloadeddata?: JSX.EventHandlerUnion<HTMLInputElement, Event> | undefined;
        onloadedmetadata?: JSX.EventHandlerUnion<HTMLInputElement, Event> | undefined;
        onloadstart?: JSX.EventHandlerUnion<HTMLInputElement, Event> | undefined;
        onlostpointercapture?: JSX.EventHandlerUnion<HTMLInputElement, PointerEvent> | undefined;
        onmousedown?: JSX.EventHandlerUnion<HTMLInputElement, MouseEvent> | undefined;
        onmouseenter?: JSX.EventHandlerUnion<HTMLInputElement, MouseEvent> | undefined;
        onmouseleave?: JSX.EventHandlerUnion<HTMLInputElement, MouseEvent> | undefined;
        onmousemove?: JSX.EventHandlerUnion<HTMLInputElement, MouseEvent> | undefined;
        onmouseout?: JSX.EventHandlerUnion<HTMLInputElement, MouseEvent> | undefined;
        onmouseover?: JSX.EventHandlerUnion<HTMLInputElement, MouseEvent> | undefined;
        onmouseup?: JSX.EventHandlerUnion<HTMLInputElement, MouseEvent> | undefined;
        onpause?: JSX.EventHandlerUnion<HTMLInputElement, Event> | undefined;
        onplay?: JSX.EventHandlerUnion<HTMLInputElement, Event> | undefined;
        onplaying?: JSX.EventHandlerUnion<HTMLInputElement, Event> | undefined;
        onpointercancel?: JSX.EventHandlerUnion<HTMLInputElement, PointerEvent> | undefined;
        onpointerdown?: JSX.EventHandlerUnion<HTMLInputElement, PointerEvent> | undefined;
        onpointerenter?: JSX.EventHandlerUnion<HTMLInputElement, PointerEvent> | undefined;
        onpointerleave?: JSX.EventHandlerUnion<HTMLInputElement, PointerEvent> | undefined;
        onpointermove?: JSX.EventHandlerUnion<HTMLInputElement, PointerEvent> | undefined;
        onpointerout?: JSX.EventHandlerUnion<HTMLInputElement, PointerEvent> | undefined;
        onpointerover?: JSX.EventHandlerUnion<HTMLInputElement, PointerEvent> | undefined;
        onpointerup?: JSX.EventHandlerUnion<HTMLInputElement, PointerEvent> | undefined;
        onprogress?: JSX.EventHandlerUnion<HTMLInputElement, Event> | undefined;
        onratechange?: JSX.EventHandlerUnion<HTMLInputElement, Event> | undefined;
        onreset?: JSX.EventHandlerUnion<HTMLInputElement, Event> | undefined;
        onscroll?: JSX.EventHandlerUnion<HTMLInputElement, UIEvent> | undefined;
        onseeked?: JSX.EventHandlerUnion<HTMLInputElement, Event> | undefined;
        onseeking?: JSX.EventHandlerUnion<HTMLInputElement, Event> | undefined;
        onselect?: JSX.EventHandlerUnion<HTMLInputElement, UIEvent> | undefined;
        onstalled?: JSX.EventHandlerUnion<HTMLInputElement, Event> | undefined;
        onsubmit?: JSX.EventHandlerUnion<HTMLInputElement, Event & {
            submitter: HTMLElement;
        }> | undefined;
        onsuspend?: JSX.EventHandlerUnion<HTMLInputElement, Event> | undefined;
        ontimeupdate?: JSX.EventHandlerUnion<HTMLInputElement, Event> | undefined;
        ontouchcancel?: JSX.EventHandlerUnion<HTMLInputElement, TouchEvent> | undefined;
        ontouchend?: JSX.EventHandlerUnion<HTMLInputElement, TouchEvent> | undefined;
        ontouchmove?: JSX.EventHandlerUnion<HTMLInputElement, TouchEvent> | undefined;
        ontouchstart?: JSX.EventHandlerUnion<HTMLInputElement, TouchEvent> | undefined;
        ontransitionend?: JSX.EventHandlerUnion<HTMLInputElement, TransitionEvent> | undefined;
        onvolumechange?: JSX.EventHandlerUnion<HTMLInputElement, Event> | undefined;
        onwaiting?: JSX.EventHandlerUnion<HTMLInputElement, Event> | undefined;
        onwheel?: JSX.EventHandlerUnion<HTMLInputElement, WheelEvent> | undefined;
        autofocus?: boolean | undefined;
        tabIndex?: string | number | undefined;
        disabled?: boolean | undefined;
        multiple?: boolean | undefined;
        size?: string | number | undefined;
        readonly?: boolean | undefined;
        onCopy?: JSX.EventHandlerUnion<HTMLInputElement, ClipboardEvent> | undefined;
        onCut?: JSX.EventHandlerUnion<HTMLInputElement, ClipboardEvent> | undefined;
        onPaste?: JSX.EventHandlerUnion<HTMLInputElement, ClipboardEvent> | undefined;
        onCompositionEnd?: JSX.EventHandlerUnion<HTMLInputElement, CompositionEvent> | undefined;
        onCompositionStart?: JSX.EventHandlerUnion<HTMLInputElement, CompositionEvent> | undefined;
        onCompositionUpdate?: JSX.EventHandlerUnion<HTMLInputElement, CompositionEvent> | undefined;
        onFocus?: JSX.EventHandlerUnion<HTMLInputElement, FocusEvent> | undefined;
        onFocusOut?: JSX.EventHandlerUnion<HTMLInputElement, FocusEvent> | undefined;
        onFocusIn?: JSX.EventHandlerUnion<HTMLInputElement, FocusEvent> | undefined;
        onBlur?: JSX.EventHandlerUnion<HTMLInputElement, FocusEvent> | undefined;
        onChange?: JSX.EventHandlerUnion<HTMLInputElement, Event> | undefined;
        onInvalid?: JSX.EventHandlerUnion<HTMLInputElement, Event> | undefined;
        onInput?: JSX.EventHandlerUnion<HTMLInputElement, InputEvent> | undefined;
        onBeforeInput?: JSX.EventHandlerUnion<HTMLInputElement, InputEvent> | undefined;
        onReset?: JSX.EventHandlerUnion<HTMLInputElement, Event> | undefined;
        onSubmit?: JSX.EventHandlerUnion<HTMLInputElement, Event & {
            submitter: HTMLElement;
        }> | undefined;
        onLoad?: JSX.EventHandlerUnion<HTMLInputElement, Event> | undefined;
        onError?: JSX.EventHandlerUnion<HTMLInputElement, Event> | undefined;
        onKeyDown?: JSX.EventHandlerUnion<HTMLInputElement, KeyboardEvent> | undefined;
        onKeyPress?: JSX.EventHandlerUnion<HTMLInputElement, KeyboardEvent> | undefined;
        onKeyUp?: JSX.EventHandlerUnion<HTMLInputElement, KeyboardEvent> | undefined;
        onGotPointerCapture?: JSX.EventHandlerUnion<HTMLInputElement, PointerEvent> | undefined;
        onLostPointerCapture?: JSX.EventHandlerUnion<HTMLInputElement, PointerEvent> | undefined;
        onPointerCancel?: JSX.EventHandlerUnion<HTMLInputElement, PointerEvent> | undefined;
        onPointerDown?: JSX.EventHandlerUnion<HTMLInputElement, PointerEvent> | undefined;
        onPointerEnter?: JSX.EventHandlerUnion<HTMLInputElement, PointerEvent> | undefined;
        onPointerLeave?: JSX.EventHandlerUnion<HTMLInputElement, PointerEvent> | undefined;
        onPointerMove?: JSX.EventHandlerUnion<HTMLInputElement, PointerEvent> | undefined;
        onPointerOver?: JSX.EventHandlerUnion<HTMLInputElement, PointerEvent> | undefined;
        onPointerOut?: JSX.EventHandlerUnion<HTMLInputElement, PointerEvent> | undefined;
        onPointerUp?: JSX.EventHandlerUnion<HTMLInputElement, PointerEvent> | undefined;
        onAbort?: JSX.EventHandlerUnion<HTMLInputElement, Event> | undefined;
        onCanPlay?: JSX.EventHandlerUnion<HTMLInputElement, Event> | undefined;
        onCanPlayThrough?: JSX.EventHandlerUnion<HTMLInputElement, Event> | undefined;
        onDurationChange?: JSX.EventHandlerUnion<HTMLInputElement, Event> | undefined;
        onEmptied?: JSX.EventHandlerUnion<HTMLInputElement, Event> | undefined;
        onEncrypted?: JSX.EventHandlerUnion<HTMLInputElement, Event> | undefined;
        onEnded?: JSX.EventHandlerUnion<HTMLInputElement, Event> | undefined;
        onLoadedData?: JSX.EventHandlerUnion<HTMLInputElement, Event> | undefined;
        onLoadedMetadata?: JSX.EventHandlerUnion<HTMLInputElement, Event> | undefined;
        onLoadStart?: JSX.EventHandlerUnion<HTMLInputElement, Event> | undefined;
        onPause?: JSX.EventHandlerUnion<HTMLInputElement, Event> | undefined;
        onPlay?: JSX.EventHandlerUnion<HTMLInputElement, Event> | undefined;
        onPlaying?: JSX.EventHandlerUnion<HTMLInputElement, Event> | undefined;
        onProgress?: JSX.EventHandlerUnion<HTMLInputElement, Event> | undefined;
        onRateChange?: JSX.EventHandlerUnion<HTMLInputElement, Event> | undefined;
        onSeeked?: JSX.EventHandlerUnion<HTMLInputElement, Event> | undefined;
        onSeeking?: JSX.EventHandlerUnion<HTMLInputElement, Event> | undefined;
        onStalled?: JSX.EventHandlerUnion<HTMLInputElement, Event> | undefined;
        onSuspend?: JSX.EventHandlerUnion<HTMLInputElement, Event> | undefined;
        onTimeUpdate?: JSX.EventHandlerUnion<HTMLInputElement, Event> | undefined;
        onVolumeChange?: JSX.EventHandlerUnion<HTMLInputElement, Event> | undefined;
        onWaiting?: JSX.EventHandlerUnion<HTMLInputElement, Event> | undefined;
        onClick?: JSX.EventHandlerUnion<HTMLInputElement, MouseEvent> | undefined;
        onContextMenu?: JSX.EventHandlerUnion<HTMLInputElement, MouseEvent> | undefined;
        onDblClick?: JSX.EventHandlerUnion<HTMLInputElement, MouseEvent> | undefined;
        onDrag?: JSX.EventHandlerUnion<HTMLInputElement, DragEvent> | undefined;
        onDragEnd?: JSX.EventHandlerUnion<HTMLInputElement, DragEvent> | undefined;
        onDragEnter?: JSX.EventHandlerUnion<HTMLInputElement, DragEvent> | undefined;
        onDragExit?: JSX.EventHandlerUnion<HTMLInputElement, DragEvent> | undefined;
        onDragLeave?: JSX.EventHandlerUnion<HTMLInputElement, DragEvent> | undefined;
        onDragOver?: JSX.EventHandlerUnion<HTMLInputElement, DragEvent> | undefined;
        onDragStart?: JSX.EventHandlerUnion<HTMLInputElement, DragEvent> | undefined;
        onDrop?: JSX.EventHandlerUnion<HTMLInputElement, DragEvent> | undefined;
        onMouseDown?: JSX.EventHandlerUnion<HTMLInputElement, MouseEvent> | undefined;
        onMouseEnter?: JSX.EventHandlerUnion<HTMLInputElement, MouseEvent> | undefined;
        onMouseLeave?: JSX.EventHandlerUnion<HTMLInputElement, MouseEvent> | undefined;
        onMouseMove?: JSX.EventHandlerUnion<HTMLInputElement, MouseEvent> | undefined;
        onMouseOut?: JSX.EventHandlerUnion<HTMLInputElement, MouseEvent> | undefined;
        onMouseOver?: JSX.EventHandlerUnion<HTMLInputElement, MouseEvent> | undefined;
        onMouseUp?: JSX.EventHandlerUnion<HTMLInputElement, MouseEvent> | undefined;
        onSelect?: JSX.EventHandlerUnion<HTMLInputElement, UIEvent> | undefined;
        onTouchCancel?: JSX.EventHandlerUnion<HTMLInputElement, TouchEvent> | undefined;
        onTouchEnd?: JSX.EventHandlerUnion<HTMLInputElement, TouchEvent> | undefined;
        onTouchMove?: JSX.EventHandlerUnion<HTMLInputElement, TouchEvent> | undefined;
        onTouchStart?: JSX.EventHandlerUnion<HTMLInputElement, TouchEvent> | undefined;
        onScroll?: JSX.EventHandlerUnion<HTMLInputElement, UIEvent> | undefined;
        onWheel?: JSX.EventHandlerUnion<HTMLInputElement, WheelEvent> | undefined;
        onAnimationStart?: JSX.EventHandlerUnion<HTMLInputElement, AnimationEvent> | undefined;
        onAnimationEnd?: JSX.EventHandlerUnion<HTMLInputElement, AnimationEvent> | undefined;
        onAnimationIteration?: JSX.EventHandlerUnion<HTMLInputElement, AnimationEvent> | undefined;
        onTransitionEnd?: JSX.EventHandlerUnion<HTMLInputElement, TransitionEvent> | undefined;
        oncompositionend?: JSX.EventHandlerUnion<HTMLInputElement, CompositionEvent> | undefined;
        oncompositionstart?: JSX.EventHandlerUnion<HTMLInputElement, CompositionEvent> | undefined;
        oncompositionupdate?: JSX.EventHandlerUnion<HTMLInputElement, CompositionEvent> | undefined;
        onfocusout?: JSX.EventHandlerUnion<HTMLInputElement, FocusEvent> | undefined;
        onfocusin?: JSX.EventHandlerUnion<HTMLInputElement, FocusEvent> | undefined;
        onbeforeinput?: JSX.EventHandlerUnion<HTMLInputElement, InputEvent> | undefined;
        onencrypted?: JSX.EventHandlerUnion<HTMLInputElement, Event> | undefined;
        ondragexit?: JSX.EventHandlerUnion<HTMLInputElement, DragEvent> | undefined;
        list?: string | undefined;
        step?: string | number | undefined;
        class?: string | undefined;
        contenteditable?: boolean | "inherit" | undefined;
        tabindex?: string | number | undefined;
        about?: string | undefined;
        datatype?: string | undefined;
        inlist?: any;
        property?: string | undefined;
        resource?: string | undefined;
        typeof?: string | undefined;
        vocab?: string | undefined;
        role?: "search" | "link" | "none" | "button" | "grid" | "article" | "dialog" | "figure" | "form" | "img" | "main" | "marquee" | "menu" | "meter" | "option" | "table" | "switch" | "document" | "menubar" | "status" | "toolbar" | "alert" | "application" | "group" | "region" | "row" | "list" | "listbox" | "tree" | "alertdialog" | "banner" | "cell" | "checkbox" | "columnheader" | "combobox" | "complementary" | "contentinfo" | "definition" | "directory" | "feed" | "gridcell" | "heading" | "listitem" | "log" | "math" | "menuitem" | "menuitemcheckbox" | "menuitemradio" | "navigation" | "note" | "presentation" | "progressbar" | "radio" | "radiogroup" | "rowgroup" | "rowheader" | "scrollbar" | "searchbox" | "separator" | "slider" | "spinbutton" | "tab" | "tablist" | "tabpanel" | "term" | "textbox" | "timer" | "tooltip" | "treegrid" | "treeitem" | undefined;
        itemprop?: string | undefined;
        itemscope?: boolean | undefined;
        itemtype?: string | undefined;
        itemid?: string | undefined;
        itemref?: string | undefined;
        exportparts?: string | undefined;
        inputmode?: "search" | "numeric" | "none" | "url" | "text" | "decimal" | "tel" | "email" | undefined;
        contextMenu?: string | undefined;
        autoCapitalize?: JSX.HTMLAutocapitalize | undefined;
        itemProp?: string | undefined;
        itemScope?: boolean | undefined;
        itemType?: string | undefined;
        itemId?: string | undefined;
        itemRef?: string | undefined;
        exportParts?: string | undefined;
        "aria-activedescendant"?: string | undefined;
        "aria-atomic"?: boolean | "false" | "true" | undefined;
        "aria-autocomplete"?: "inline" | "both" | "none" | "list" | undefined;
        "aria-busy"?: boolean | "false" | "true" | undefined;
        "aria-checked"?: boolean | "mixed" | "false" | "true" | undefined;
        "aria-colcount"?: string | number | undefined;
        "aria-colindex"?: string | number | undefined;
        "aria-colspan"?: string | number | undefined;
        "aria-controls"?: string | undefined;
        "aria-current"?: boolean | "location" | "time" | "false" | "true" | "page" | "step" | "date" | undefined;
        "aria-describedby"?: string | undefined;
        "aria-details"?: string | undefined;
        "aria-disabled"?: boolean | "false" | "true" | undefined;
        "aria-dropeffect"?: "link" | "none" | "copy" | "move" | "execute" | "popup" | undefined;
        "aria-errormessage"?: string | undefined;
        "aria-expanded"?: boolean | "false" | "true" | undefined;
        "aria-flowto"?: string | undefined;
        "aria-grabbed"?: boolean | "false" | "true" | undefined;
        "aria-haspopup"?: boolean | "grid" | "dialog" | "menu" | "false" | "true" | "listbox" | "tree" | undefined;
        "aria-hidden"?: boolean | "false" | "true" | undefined;
        "aria-invalid"?: boolean | "false" | "true" | "grammar" | "spelling" | undefined;
        "aria-keyshortcuts"?: string | undefined;
        "aria-label"?: string | undefined;
        "aria-labelledby"?: string | undefined;
        "aria-level"?: string | number | undefined;
        "aria-live"?: "off" | "assertive" | "polite" | undefined;
        "aria-modal"?: boolean | "false" | "true" | undefined;
        "aria-multiline"?: boolean | "false" | "true" | undefined;
        "aria-multiselectable"?: boolean | "false" | "true" | undefined;
        "aria-orientation"?: "horizontal" | "vertical" | undefined;
        "aria-owns"?: string | undefined;
        "aria-placeholder"?: string | undefined;
        "aria-posinset"?: string | number | undefined;
        "aria-pressed"?: boolean | "mixed" | "false" | "true" | undefined;
        "aria-readonly"?: boolean | "false" | "true" | undefined;
        "aria-relevant"?: "all" | "text" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals" | undefined;
        "aria-required"?: boolean | "false" | "true" | undefined;
        "aria-roledescription"?: string | undefined;
        "aria-rowcount"?: string | number | undefined;
        "aria-rowindex"?: string | number | undefined;
        "aria-rowspan"?: string | number | undefined;
        "aria-selected"?: boolean | "false" | "true" | undefined;
        "aria-setsize"?: string | number | undefined;
        "aria-sort"?: "none" | "other" | "ascending" | "descending" | undefined;
        "aria-valuemax"?: string | number | undefined;
        "aria-valuemin"?: string | number | undefined;
        "aria-valuenow"?: string | number | undefined;
        "aria-valuetext"?: string | undefined;
        alt?: string | undefined;
        formaction?: string | undefined;
        formenctype?: JSX.HTMLFormEncType | undefined;
        formmethod?: JSX.HTMLFormMethod | undefined;
        formnovalidate?: boolean | undefined;
        formtarget?: string | undefined;
        formAction?: string | undefined;
        formEnctype?: JSX.HTMLFormEncType | undefined;
        formMethod?: JSX.HTMLFormMethod | undefined;
        formNoValidate?: boolean | undefined;
        formTarget?: string | undefined;
        src?: string | undefined;
        crossorigin?: JSX.HTMLCrossorigin | undefined;
        crossOrigin?: JSX.HTMLCrossorigin | undefined;
        accept?: string | undefined;
        capture?: string | boolean | undefined;
        checked?: boolean | undefined;
        maxlength?: string | number | undefined;
        min?: string | number | undefined;
        minlength?: string | number | undefined;
        placeholder?: string | undefined;
        maxLength?: string | number | undefined;
        minLength?: string | number | undefined;
        readOnly?: boolean | undefined;
        as?: import("./helpers").ElementType | undefined;
        ref?: HTMLInputElement | ((el: HTMLInputElement) => void) | undefined;
        $ServerOnly?: boolean | undefined;
        bsPrefix?: string | undefined;
        isValid?: boolean | undefined;
        isInvalid?: boolean | undefined;
        feedbackTooltip?: boolean | undefined;
        feedbackType?: import("./Feedback").FeedbackType | undefined;
        bsSwitchPrefix?: string | undefined;
    }> & {
        Input: BsPrefixRefForwardingComponent<"input", import("./FormCheckInput").FormCheckInputProps>;
        Label: (p: import("./FormCheckLabel").FormCheckLabelProps) => JSX.Element;
    };
    Label: BsPrefixRefForwardingComponent<"label", import("./FormLabel").FormLabelProps>;
    Text: BsPrefixRefForwardingComponent<"small", import("./FormText").FormTextProps>;
    Range: (p: import("./FormRange").FormRangeProps) => JSX.Element;
    Select: BsPrefixRefForwardingComponent<"select", import("./FormSelect").FormSelectProps>;
    FloatingLabel: BsPrefixRefForwardingComponent<"div", import("./FloatingLabel").FloatingLabelProps>;
};
export default _default;
