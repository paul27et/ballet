import { mergeProps, splitProps } from "solid-js";
import classNames from "./classnames";
import { useBootstrapPrefix, useBootstrapBreakpoints } from "./ThemeProvider";
import { Dynamic } from "solid-js/web";
const defaultProps = {
    as: "div",
};
const Row = (p) => {
    const [local, props] = splitProps(mergeProps(defaultProps, p), ["as", "bsPrefix", "className"]);
    const decoratedBsPrefix = useBootstrapPrefix(local.bsPrefix, "row");
    const breakpoints = useBootstrapBreakpoints();
    const sizePrefix = `${decoratedBsPrefix}-cols`;
    const classes = [];
    breakpoints().forEach((brkPoint) => {
        const propValue = props[brkPoint];
        delete props[brkPoint];
        let cols;
        if (propValue != null && typeof propValue === "object") {
            ({ cols } = propValue);
        }
        else {
            cols = propValue;
        }
        const infix = brkPoint !== "xs" ? `-${brkPoint}` : "";
        if (cols != null)
            classes.push(`${sizePrefix}${infix}-${cols}`);
    });
    return (<Dynamic component={local.as} {...props} className={classNames(local.className, decoratedBsPrefix, ...classes)}>
      {props.children}
    </Dynamic>);
};
export default Row;
