import { SetStoreFunction, Store } from "store";
export declare const $RAW: unique symbol;
export declare function isWrappable(obj: any): boolean;
export declare function unwrap<T>(item: any): T;
export declare function setProperty(state: any, property: string | number, value: any, force?: boolean): void;
export declare function updatePath(current: any, path: any[], traversed?: (number | string)[]): void;
export declare function createStore<T>(state: T | Store<T>): [Store<T>, SetStoreFunction<T>];
export declare function createMutable<T>(state: T | Store<T>): Store<T>;
declare type ReconcileOptions = {
    key?: string | null;
    merge?: boolean;
};
export declare function reconcile<T>(value: T | Store<T>, options?: ReconcileOptions): (state: Store<T>) => void;
export declare function produce<T>(fn: (state: T) => void): (state: Store<T>) => Store<T>;
export {};
